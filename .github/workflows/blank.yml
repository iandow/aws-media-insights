# This is a basic workflow to help you get started with Actions

name: iantest

# Controls when the action will run. 
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Set the value
        id: step_one
        run: |
            echo "action_state=yellow" >> $GITHUB_ENV
      - name: Use the value
        id: step_two
        run: |
            echo "${{ env.action_state }}" # This will output 'yellow'

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          invitation-email-recipient: ${{ secrets.INVITATION_EMAIL_RECIPIENT }}
          aws-region: us-west-2

      # Runs a single command using the runners shell
      - name: Get login credentials
        run: |
          # Get the newest file in s3://github-test-bot
          NUM_EMAILS=$(aws s3 ls s3://github-test-bot | wc -l)
          # Iterate thru all the files in the s3 bucket until you find the invitation 
          # email that references to our stack:
          for i in `seq 1 $NUM_EMAILS`; do
          INVITATION_EMAIL=$(aws s3api list-objects-v2 --bucket "github-test-bot" --query 'reverse(sort_by(Contents, &LastModified))['$((i-1))'].Key' --output=text)
          # Make sure it belongs to our stack
          aws s3 cp s3://github-test-bot/$INVITATION_EMAIL ./invitation_email --quiet
          WEBAPP_STACK_NAME="pr${SHORT_SHA}"
          grep ":stack/${WEBAPP_STACK_NAME}" ./invitation_email
          if [ $? -eq 0 ]; 
          then break; # we found the invitation email so quit looking
          fi;
          done;
          # Remove the invitation email from s3
          #aws s3 rm s3://github-test-bot/$INVITATION_EMAIL
          TEMP_PASSWORD=$(cat ./invitation_email | grep 'temporary password' | sed 's/.*password is \(.*\)<br>AWS.*/\1/')
          # Password may contain HTML entities, so decode them to characters
          TEMP_PASSWORD=$(echo $TEMP_PASSWORD | perl -MHTML::Entities -pe 'decode_entities($_);')
          echo "Temp password is $TEMP_PASSWORD"
          echo "TEMP_PASSWORD=$TEMP_PASSWORD" >> $GITHUB_ENV
          echo '::set-output name=temp_password::${TEMP_PASSWORD}'


      - name: Start puppeteer
        run: |
          echo "${{ env.TEMP_PASSWORD }}" # This will output 'yellow'
          export TEMP_PASSWORD=${{ steps.vars.outputs.temp_password }}
          echo "Temp password is $TEMP_PASSWORD"
          echo "${{ env.temp_password }}"
